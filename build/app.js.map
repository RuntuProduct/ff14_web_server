{"version":3,"file":"../../app.js","sources":["webpack:///webpack/bootstrap 4d429941dec1eaaf8083","webpack:///external \"express\"","webpack:///src/utils/dealRes.js","webpack:///src/db/config.js","webpack:///external \"mysql\"","webpack:///src/app.js","webpack:///external \"babel-polyfill\"","webpack:///src/config.js","webpack:///src/db/fishSQL.js","webpack:///src/db/formulaSQL.js","webpack:///src/db/jobsql.js","webpack:///src/db/mapSQL.js","webpack:///src/db/materialSQL.js","webpack:///src/db/notesSQL.js","webpack:///src/db/productsql.js","webpack:///src/db/usersql.js","webpack:///src/routes/fish.js","webpack:///src/routes/formula.js","webpack:///src/routes/index.js","webpack:///src/routes/job.js","webpack:///src/routes/map.js","webpack:///src/routes/material.js","webpack:///src/routes/notes.js","webpack:///src/routes/product.js","webpack:///src/routes/upload.js","webpack:///src/routes/user.js","webpack:///external \"body-parser\"","webpack:///external \"compression\"","webpack:///external \"consolidate\"","webpack:///external \"http\"","webpack:///external \"lodash\"","webpack:///external \"multer\"","webpack:///external \"path\""],"sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/assets/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 32);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 4d429941dec1eaaf8083","module.exports = require(\"express\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"express\"\n// module id = 0\n// module chunks = 0","const dealRes = (res, code, data) => {\r\n  if (code) {\r\n    res.send({\r\n      code: code,\r\n      status: 'error',\r\n      message: data,\r\n      data: null,\r\n    })\r\n    res.end()\r\n  } else {\r\n    res.send({\r\n      code: 200,\r\n      status: 'success',\r\n      message: 'success',\r\n      data: data,\r\n    })\r\n    res.end()\r\n  }\r\n}\r\n\r\nexport default dealRes\r\n\n\n\n// WEBPACK FOOTER //\n// src/utils/dealRes.js","export default {\r\n  mysql: {\r\n    host: '120.78.152.254',\r\n    // host: '192.168.31.200',\r\n    user: 'db_user',\r\n    password: 'db_pass',\r\n    database: 'handbookDB', // 前面建的user表位于这个数据库中 \r\n    port: 3306,\r\n    connectionLimit: 10,\r\n  },\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// src/db/config.js","module.exports = require(\"mysql\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"mysql\"\n// module id = 3\n// module chunks = 0","import express from 'express'\r\nimport path from 'path'\r\nimport http from 'http'\r\nimport consolidate from 'consolidate'\r\nimport bodyParser from 'body-parser'\r\nimport compression from 'compression' // gzip压缩插件\r\nimport { port } from './config'\r\nimport Router from './routes/index'\r\n\r\nconst app = express()\r\nconst isDev = app.get('env') !== 'production'\r\n\r\napp.use(compression()) // 启用 gzip压缩\r\n\r\napp.set('views', path.join(__dirname, 'views'))\r\napp.set('view engine', 'html')\r\napp.engine('html', consolidate.ejs)\r\n\r\n// app.use(bodyParser()) // for parsing application/jso\r\napp.use(bodyParser.json()) // for parsing application/json\r\napp.use(bodyParser.text()) // for parsing application/json\r\napp.use(bodyParser.urlencoded({\r\n  extended: true,\r\n})) // for parsing application/x-www-form-urlencoded\r\n\r\napp.use(express.static(path.join(__dirname, '../dist')))\r\napp.use(express.static(path.join(__dirname, '../uploads')))\r\n\r\nRouter(app)\r\n\r\nif (isDev) {\r\n  // add \"reload\" to express, see: https://www.npmjs.com/package/reload\r\n  const server = http.createServer(app)\r\n\r\n  server.listen(port, () => {\r\n    console.log(`The server is running at http://localhost:${port}/`)\r\n  })\r\n} else {\r\n  // static assets served by express.static() for production\r\n  app.listen(port, () => {\r\n    console.log(`The server is running at http://localhost:${port}/`)\r\n  })\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// src/app.js","module.exports = require(\"babel-polyfill\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"babel-polyfill\"\n// module id = 5\n// module chunks = 0","export const port = process.env.PORT || 3000;\n\n\n\n// WEBPACK FOOTER //\n// src/config.js","const fishSQL = {\r\n  insert: 'INSERT INTO fish(name, img)' + 'VALUES(?,?)',\r\n  update: 'UPDATE fish SET name = ?, img = ? WHERE id = ?',\r\n  queryPage: 'SELECT * FROM fish AS f WHERE f.name LIKE ? LIMIT ?,?',\r\n  count: 'SELECT COUNT(*) AS total FROM fish',\r\n}\r\n\r\nexport default fishSQL\r\n\n\n\n// WEBPACK FOOTER //\n// src/db/fishSQL.js","const formulaSQL = {\r\n  insert: 'INSERT INTO formula(pid, tarId, tarType, num) VALUES(?,?,?,?)',\r\n  compare: 'SELECT * FROM formula AS f WHERE f.pid = ? AND f.tarId = ? AND f.tarType = ?',  // 比较\r\n  query: 'SELECT j.id AS jobId, j.name AS jobName,'\r\n  + 'p.id AS proId, p.name AS proName, p.type AS proType,'\r\n  + 'f.tarId AS forTarId, f.tarType AS forTarId, f.num AS forNum,'\r\n  + 'FROM job AS j, PRODUCT AS p, formula AS f '\r\n  + 'WHERE f.pid LIKE ?',\r\n  // 获取product详情\r\n  getSingleProduct: 'SELECT'\r\n  + ' p.id, p.name, p.img, p.level, p.difficulty, p.stamina,'\r\n  + ' j.id AS jobId, j.name AS jobName'\r\n  + ' FROM product AS p, job AS j'\r\n  + ' WHERE p.id = ? AND j.id = p.jobId',\r\n  // 根据pid获取配方集合\r\n  getFormulaByPid: 'SELECT'\r\n  + ' *'\r\n  + ' FROM formula AS f'\r\n  + ' WHERE f.pid = ?',\r\n  // 根据id集合获取材料\r\n  getMaterialByIds: 'SELECT'\r\n  + ' m.id, m.name, m.img,'\r\n  + ' j.id AS jobId, j.name AS jobName'\r\n  + ' FROM material AS m, job AS j'\r\n  + ' WHERE m.id IN (?) AND m.jobId = j.id',\r\n  // 根据id集合获取作物\r\n  getProductByIds: 'SELECT'\r\n  + ' p.id, p.name, p.img,'\r\n  + ' j.id AS jobId, j.name AS jobName'\r\n  + ' FROM product AS p, job AS j'\r\n  + ' WHERE p.id IN (?) AND p.jobId = j.id',\r\n  // 根据id集合获取鱼类\r\n  getFishByIds: 'SELECT'\r\n  + ' f.id, f.name, f.img,'\r\n  + ' j.id AS jobId, j.name AS jobName'\r\n  + ' FROM fish AS f, job AS j'\r\n  + ' WHERE f.id IN (?) AND j.id = 1',\r\n}\r\n\r\nexport default formulaSQL\r\n\n\n\n// WEBPACK FOOTER //\n// src/db/formulaSQL.js","const JobSQL = {  \n  // insert: 'INSERT INTO user(uid,userName) VALUES(?,?)', \n  queryPage: 'SELECT * FROM job LIMIT ?,?',\n  count: 'SELECT COUNT(*) AS total FROM job',\n  queryValue: 'SELECT * FROM job WHERE name LIKE ? OR type In (?)',\n}\n\nexport default JobSQL\n\n\n\n// WEBPACK FOOTER //\n// src/db/jobsql.js","const mapSQL = {\n  insert: 'INSERT'\n  + ' INTO map(name, img)'\n  + ' VALUES(?,?)',\n  update: 'UPDATE'\n  + ' map'\n  + ' SET name = ?, img = ?'\n  + ' WHERE id = ?',\n  queryPage: 'SELECT'\n  + ' *'\n  + ' FROM map AS m'\n  + ' WHERE m.name LIKE ? LIMIT ?,?',\n  count: 'SELECT COUNT(*) AS total FROM map',\n}\n\nexport default mapSQL\n\n\n\n// WEBPACK FOOTER //\n// src/db/mapSQL.js","const materialSQL = {\r\n  insert: 'INSERT'\r\n  + ' INTO material(name, img, jobId, getType)'\r\n  + ' VALUES (?,?,?,?)',\r\n  update: 'UPDATE material SET name = ?, img = ?, jobId = ?, getType = ? WHERE id = ?',\r\n  delete: 'DELETE FROM material WHERE id = ?',\r\n  queryPage: 'SELECT m.id, m.name, m.getType, m.img, m.jobId,'\r\n  + 'j.id AS jobId, j.name AS jobName '\r\n  + 'FROM material AS m, job AS j '\r\n  + 'WHERE m.name LIKE ? AND m.getType LIKE ? AND m.jobId = j.id LIMIT ?,?',\r\n  count: 'SELECT COUNT(*) AS total FROM material',\r\n  getUserById: 'SELECT * FROM material WHERE id = ? ',\r\n}\r\n\r\nexport default materialSQL\r\n\n\n\n// WEBPACK FOOTER //\n// src/db/materialSQL.js","const NotesSQL = {  \n  product: 'SELECT * From product AS p '\n  + 'WHERE p.jobId = ? AND p.level BETWEEN ? AND ?',\n}\n\nexport default NotesSQL\n\n\n\n// WEBPACK FOOTER //\n// src/db/notesSQL.js","const JobSQL = {\r\n  insert: 'INSERT INTO product(name, img, jobId, level, difficulty, stamina) VALUES(?,?,?,?,?,?)',\r\n  update: 'UPDATE product SET name = ?, img = ?, jobId = ?, level = ?, difficulty = ?, stamina = ? WHERE id = ?',\r\n  delete: 'DELETE FROM product WHERE id = ?',\r\n  queryPage: 'SELECT p.id, p.name, p.img, p.jobId, p.level, p.difficulty, p.stamina, '\r\n  + 'j.name AS jobName '\r\n  + 'FROM product AS p, job AS j '\r\n  + 'WHERE p.name LIKE ? AND p.jobId IN (?) AND p.jobId = j.id LIMIT ?,?',\r\n  count: 'SELECT COUNT(*) AS total FROM product',\r\n  getUserById: 'SELECT * FROM product WHERE id = ? ',\r\n}\r\n\r\nexport default JobSQL\r\n\n\n\n// WEBPACK FOOTER //\n// src/db/productsql.js","const UserSQL = {\n  insert: 'INSERT INTO user(uid,userName) VALUES(?,?)',\n  queryAll: 'SELECT * FROM user',\n  getUserById: 'SELECT * FROM user WHERE id = ? ',\n  userLogin: 'SELECT * FROM user WHERE ( account = ? AND pwd = ? )',\n}\n\nexport default UserSQL\n\n\n\n// WEBPACK FOOTER //\n// src/db/usersql.js","import express from 'express'\r\nimport mysql from 'mysql'\r\nimport dbConfig from '../db/config'\r\nimport fishSQL from '../db/fishSQL'\r\nimport dealRes from '../utils/dealRes'\r\n\r\nconst router = express.Router()\r\n// 使用数据库配置信息创建一个MySQL连接池\r\nconst pool = mysql.createPool(dbConfig.mysql)\r\n\r\n// 获取分页\r\nrouter.get('/', (req, res) => {\r\n  let { page, pageSize } = req.query\r\n  const { name } = req.query\r\n  page = parseInt(page, 10)\r\n  pageSize = parseInt(pageSize, 10)\r\n\r\n  let sName\r\n  if (name) {\r\n    sName = `%${name}%`\r\n  } else {\r\n    sName = '%'\r\n  }\r\n\r\n  if (!page || !pageSize) {\r\n    return dealRes(res, 1, '分页信息错误！')\r\n  }\r\n\r\n  try {\r\n    pool.getConnection((err1, connection) => {\r\n      if (err1) throw err1\r\n      connection.query(fishSQL.queryPage, [sName, (page - 1) * pageSize, pageSize], (err2, result) => {\r\n        if (err2) throw err2\r\n        connection.query(fishSQL.count, (err3, count) => {\r\n          if (err3) throw err3\r\n          // 释放连接池\r\n          connection.release()\r\n          const { total } = count[0]\r\n          return dealRes(res, 0, {\r\n            list: result,\r\n            current: page,\r\n            pageSize,\r\n            total,\r\n          })\r\n        })\r\n      })\r\n    })\r\n  } catch (e) {\r\n    return dealRes(res, 1, 'internal error')\r\n  }\r\n})\r\n\r\n// 添加鱼类\r\nrouter.post('/', (req, res) => {\r\n  const { name, img } = req.body\r\n\r\n  if (!name) {\r\n    return dealRes(res, 1, '材料信息错误！')\r\n  }\r\n\r\n  try {\r\n    pool.getConnection((err1, connection) => {\r\n      if (err1) throw err1\r\n      connection.query(fishSQL.insert, [name, img], (err2, result) => {\r\n        if (err2) throw err2\r\n        // 释放连接池\r\n        connection.release()\r\n        return dealRes(res, 0, '添加成功')\r\n      })\r\n    })\r\n  } catch (e) {\r\n    return dealRes(res, 1, 'internal error')\r\n  }\r\n})\r\n\r\n// 编辑\r\nrouter.put('/', (req, res) => {\r\n  const { id, name, img } = req.body\r\n\r\n  if (id === undefined || !name) {\r\n    return dealRes(res, 1, '材料信息错误！')\r\n  }\r\n\r\n  try {\r\n    pool.getConnection((err1, connection) => {\r\n      if (err1) throw err1\r\n      connection.query(fishSQL.update, [name, img, id], (err2, result) => {\r\n        if (err2) throw err2\r\n        // 释放连接池\r\n        connection.release()\r\n        return dealRes(res, 0, '修改成功')\r\n      })\r\n    })\r\n  } catch (e) {\r\n    return dealRes(res, 1, 'internal error')\r\n  }\r\n})\r\n\r\nexport default router\r\n\n\n\n// WEBPACK FOOTER //\n// src/routes/fish.js","import express from 'express'\r\nimport mysql from 'mysql'\r\nimport _ from 'lodash'\r\nimport dbConfig from '../db/config'\r\nimport formulaSQL from '../db/formulaSQL'\r\nimport dealRes from '../utils/dealRes'\r\n\r\nconst router = express.Router()\r\n// 使用数据库配置信息创建一个MySQL链接池\r\nconst pool = mysql.createPool(dbConfig.mysql)\r\n\r\nconst getTarAry = (ary, type) => {\r\n  return new Promise((resolve, reject) => {\r\n    try {\r\n      const ids = ary.filter(da => da.tarType == type).map(da => da.tarId)\r\n      let query\r\n      if (type === '01') {\r\n        query = formulaSQL.getMaterialByIds\r\n      } else if (type === '02') {\r\n        query = formulaSQL.getProductByIds\r\n      } else if (type === '03') {\r\n        query = formulaSQL.getFishByIds\r\n      } else {\r\n        throw new Error('类型错误')\r\n      }\r\n      // console.log(query, ids)\r\n\r\n      pool.getConnection((err1, connection) => {\r\n        if (err1) throw new Error(err1)\r\n        if (ids.length) {\r\n          connection.query(query, [ids], (err2, result) => {\r\n            if (err2) throw new Error(err2)\r\n            connection.release()\r\n            resolve(result)\r\n          })\r\n        } else {\r\n          resolve([])\r\n        }\r\n      })\r\n    } catch (e) {\r\n      reject(e)\r\n    }\r\n  })\r\n}\r\n\r\nconst mixinAry = (ary, mat, pro, fish) => {\r\n  const result = []\r\n  for (let i = 0; i < ary.length; i += 1) {\r\n    const { tarType, tarId } = ary[i]\r\n    let tar\r\n    if (tarType === '01') {\r\n      tar = mat\r\n    } else if (tarType === '02') {\r\n      tar = pro\r\n    } else {\r\n      tar = fish\r\n    }\r\n    const idx = _.findIndex(tar, (da) => {\r\n      return da.id === tarId\r\n    })\r\n    const res = {}\r\n    if (idx !== -1) {\r\n      Object.assign(res, ary[i], { detail: tar[idx] })\r\n    } else {\r\n      Object.assign(res, ary[i], { detail: { id: null, name: '信息错误' } })\r\n    }\r\n    result.push(res)\r\n  }\r\n  return result\r\n}\r\n\r\n// 处理配方数据\r\nconst getFormula = async (ary) => {\r\n  const materialAry = await getTarAry(ary, '01')\r\n  const productAry = await getTarAry(ary, '02')\r\n  const fishAry = await getTarAry(ary, '03')\r\n  // console.log(fishAry, productAry, materialAry)\r\n  return mixinAry(ary, materialAry, productAry, fishAry)\r\n}\r\n\r\nrouter.get('/', (req, res) => {\r\n  const { pid } = req.query\r\n\r\n  if (pid === undefined) {\r\n    return dealRes(res, 1, 'pid参数错误！')\r\n  }\r\n\r\n  try {\r\n    pool.getConnection((err1, connection) => {\r\n      if (err1) throw new Error(err1)\r\n      connection.query(formulaSQL.getSingleProduct, [pid], (err2, result1) => {\r\n        if (err2) throw new Error(err2)\r\n        if (result1 && result1.length) {\r\n          // 成功获取product\r\n          const productObj = result1[0]\r\n          // 获取配方集合\r\n          connection.query(formulaSQL.getFormulaByPid, [pid], (err3, result2) => {\r\n            if (err3) { throw new Error(err3) }\r\n            if (result2 && result2.length) {\r\n              // 处理配方数据\r\n              getFormula(result2).then((formula) => {\r\n                // console.log('formula:', formula)\r\n                // 释放连接池\r\n                connection.release()\r\n                dealRes(res, 0, {\r\n                  ...productObj,\r\n                  formula,\r\n                })\r\n              }, (err4) => {\r\n                throw new Error(err4)\r\n              })\r\n            } else {\r\n              // 释放连接池\r\n              connection.release()\r\n              return dealRes(res, 0, {\r\n                ...productObj,\r\n                formula: [],\r\n              })\r\n            }\r\n          })\r\n        } else {\r\n          // 释放连接池\r\n          connection.release()\r\n          return dealRes(res, 1, '对应的作物不存在！')\r\n        }\r\n      })\r\n    })\r\n  } catch (e) {\r\n    return dealRes(res, 1, 'internal error')\r\n  }\r\n})\r\n\r\nrouter.post('/', (req, res) => {\r\n  const { pid, tarId, tarType, num } = req.body\r\n\r\n  if (pid === undefined || tarId == undefined || !tarType || !num) {\r\n    return dealRes(res, 1, '材料信息错误！')\r\n  }\r\n\r\n  try {\r\n    pool.getConnection((err1, connection) => {\r\n      if (err1) throw new Error(err1)\r\n      connection.query(formulaSQL.compare, [pid, tarId, tarType], (err2, result1) => {\r\n        if (err2) throw new Error(err2)\r\n        console.log(result1)\r\n        // 判断要添加的元素是否存在\r\n        if (result1.length === 0) {\r\n          connection.query(formulaSQL.insert, [pid, tarId, tarType, num], (err3, result2) => {\r\n            if (err3) throw new Error(err3)\r\n            // 释放连接池\r\n            connection.release()\r\n            return dealRes(res, 0, '添加成功')\r\n          })\r\n        } else {\r\n          // 释放连接池\r\n          connection.release()\r\n          return dealRes(res, 1, '该材料已存在！')\r\n        }\r\n      })\r\n    })\r\n  } catch (e) {\r\n    return dealRes(res, 1, 'internal error')\r\n  }\r\n})\r\n\r\nexport default router\r\n\n\n\n// WEBPACK FOOTER //\n// src/routes/formula.js","// 路由规则存放目录\r\nimport upload from './upload'\r\nimport user from './user'\r\nimport job from './job'\r\nimport product from './product'\r\nimport material from './material'\r\nimport fish from './fish'\r\nimport formula from './formula'\r\nimport notes from './notes'\r\nimport map from './map'\r\n\r\nconst router = (app) => {\r\n  app.get('/', (req, res, next) => {\r\n    res.render('./index.html')\r\n  })\r\n\r\n  app.all('/api/*', (req, res, next) => {\r\n    res.header('Access-Control-Allow-Headers', 'Access-Control-Allow-Origin, X-Requested-With, Content-Type')\r\n    res.header('Access-Control-Allow-Credentials', true)\r\n    res.header('Access-Control-Allow-Methods', 'PUT, GET, POST, DELETE, OPTIONS')\r\n    res.header('Access-Control-Allow-Origin', 'http://192.168.31.200:8014')\r\n    next()\r\n  })\r\n\r\n  app.use('/api/upload', upload)\r\n  app.use('/api/user', user)\r\n  app.use('/api/job', job)\r\n  app.use('/api/product', product)\r\n  app.use('/api/material', material)\r\n  app.use('/api/fish', fish)\r\n  app.use('/api/formula', formula)\r\n  app.use('/api/notes', notes)\r\n  app.use('/api/map', map)\r\n}\r\n\r\nexport default router\r\n\n\n\n// WEBPACK FOOTER //\n// src/routes/index.js","import express from 'express'\nimport mysql from 'mysql'\nimport dbConfig from '../db/config'\nimport jobSQL from '../db/jobsql'\nimport dealRes from '../utils/dealRes'\n\nconst router = express.Router()\n// 使用数据库配置信息创建一个MySQL链接池\nconst pool = mysql.createPool(dbConfig.mysql)\n\n// 获取分页\nrouter.get('/', (req, res) => {\n  let { page, pageSize } = req.query\n  page = parseInt(page, 10)\n  pageSize = parseInt(pageSize, 10)\n\n  if (!page || !pageSize) {\n    return dealRes(res, 1, '分页信息错误！')\n  }\n\n  try {\n    pool.getConnection((err1, connection) => {\n      if (err1) { throw err1 }\n      connection.query(jobSQL.queryPage, [(page - 1) * pageSize, pageSize], (err2, result) => {\n        if (err2) { throw err2 }\n        connection.query(jobSQL.count, (err3, count) => {\n          if (err3) { throw err3 }\n          const { total } = count[0]\n          // 释放连接池\n          connection.release()\n          return dealRes(res, 0, {\n            list: result,\n            current: page,\n            pageSize,\n            total,\n          })\n        })\n      })\n    })\n  } catch (e) {\n    return dealRes(res, 1, 'internal error')\n  }\n})\n\n// 根据职业名称或是职业类别（01-大地使者、02-能工巧匠）来搜索职业\nrouter.get('/query', (req, res) => {\n  const { value } = req.query\n  // 判断有无职业关键字\n  let type\n  const match01 = value.match(/^['大','地','使','者']+$/)\n  const match02 = value.match(/^['能','工','巧','匠']+$/)\n  if (match01) {\n    type = ['01']\n  } else if (match02) {\n    type = ['02']\n  } else {\n    type = ['none']\n  }\n  try {\n    pool.getConnection((err1, connection) => {\n      if (err1) { throw err1 }\n      const query = `%${value}%`\n      connection.query(jobSQL.queryValue, [query, type], (err2, result) => {\n        if (err2) { throw err2 }\n        // 释放连接池\n        connection.release()\n        return dealRes(res, 0, result)\n      })\n    })\n  } catch (e) {\n    return dealRes(res, 1, 'internal error')\n  }\n})\n\nexport default router\n\n\n\n// WEBPACK FOOTER //\n// src/routes/job.js","import express from 'express'\nimport mysql from 'mysql'\nimport dbConfig from '../db/config'\nimport mapSQL from '../db/mapSQL'\nimport dealRes from '../utils/dealRes'\n\nconst router = express.Router()\n// 使用数据库配置信息创建一个MySQL连接池\nconst pool = mysql.createPool(dbConfig.mysql)\n\n// 获取分页\nrouter.get('/', (req, res) => {\n  let { page, pageSize } = req.query\n  const { name } = req.query\n  page = parseInt(page, 10)\n  pageSize = parseInt(pageSize, 10)\n\n  let sName\n  if (name) {\n    sName = `%${name}%`\n  } else {\n    sName = '%'\n  }\n\n  if (!page || !pageSize) {\n    return dealRes(res, 1, '分页信息错误！')\n  }\n\n  try {\n    pool.getConnection((err1, connection) => {\n      if (err1) throw err1\n      connection.query(mapSQL.queryPage, [sName, (page - 1) * pageSize, pageSize], (err2, result) => {\n        if (err2) throw err2\n        connection.query(mapSQL.count, (err3, count) => {\n          if (err3) throw err3\n          // 释放连接池\n          connection.release()\n          const { total } = count[0]\n          return dealRes(res, 0, {\n            list: result,\n            current: page,\n            pageSize,\n            total,\n          })\n        })\n      })\n    })\n  } catch (e) {\n    return dealRes(res, 1, 'internal error')\n  }\n})\n\n// 添加地图\nrouter.post('/', (req, res) => {\n  const { name, img } = req.body\n\n  if (!name) {\n    return dealRes(res, 1, '地图信息错误！')\n  }\n\n  try {\n    pool.getConnection((err1, connection) => {\n      if (err1) throw err1\n      connection.query(mapSQL.insert, [name, img], (err2, result) => {\n        if (err2) throw err2\n        // 释放连接池\n        connection.release()\n        return dealRes(res, 0, '添加成功')\n      })\n    })\n  } catch (e) {\n    return dealRes(res, 1, 'internal error')\n  }\n})\n\n// 编辑\nrouter.put('/', (req, res) => {\n  const { id, name, img } = req.body\n\n  if (id === undefined || !name) {\n    return dealRes(res, 1, '地图信息错误！')\n  }\n\n  try {\n    pool.getConnection((err1, connection) => {\n      if (err1) throw err1\n      connection.query(mapSQL.update, [name, img, id], (err2, result) => {\n        if (err2) throw err2\n        // 释放连接池\n        connection.release()\n        return dealRes(res, 0, '修改成功')\n      })\n    })\n  } catch (e) {\n    return dealRes(res, 1, 'internal error')\n  }\n})\n\nexport default router\n\n\n\n// WEBPACK FOOTER //\n// src/routes/map.js","import express from 'express'\r\nimport mysql from 'mysql'\r\nimport dbConfig from '../db/config'\r\nimport materialSQL from '../db/materialSQL'\r\nimport dealRes from '../utils/dealRes'\r\n\r\nconst router = express.Router()\r\n// 使用数据库配置信息创建一个MySQL链接池\r\nconst pool = mysql.createPool(dbConfig.mysql)\r\n\r\n// 获取分页\r\nrouter.get('/', (req, res) => {\r\n  let { page, pageSize } = req.query\r\n  const { name, getType } = req.query\r\n  page = parseInt(page, 10)\r\n  pageSize = parseInt(pageSize, 10)\r\n\r\n  let sName\r\n  if (name) {\r\n    sName = `%${name}%`\r\n  } else {\r\n    sName = '%'\r\n  }\r\n  let sType\r\n  if (getType) {\r\n    sType = `%${getType}%`\r\n  } else {\r\n    sType = '%'\r\n  }\r\n\r\n  if (!page || !pageSize) {\r\n    return dealRes(res, 1, '分页信息错误！')\r\n  }\r\n\r\n  try {\r\n    pool.getConnection((err1, connection) => {\r\n      if (err1) { throw err1 }\r\n      connection.query(materialSQL.queryPage, [sName, sType, (page - 1) * pageSize, pageSize], (err2, result) => {\r\n        if (err2) { throw err2 }\r\n        connection.query(materialSQL.count, (err3, count) => {\r\n          if (err3) { throw err3 }\r\n          // 释放连接池\r\n          connection.release()\r\n          const { total } = count[0]\r\n          return dealRes(res, 0, {\r\n            list: result,\r\n            current: page,\r\n            pageSize,\r\n            total,\r\n          })\r\n        })\r\n      })\r\n    })\r\n  } catch (e) {\r\n    return dealRes(res, 1, 'internal error')\r\n  }\r\n})\r\n\r\n// 添加材料\r\nrouter.post('/', (req, res) => {\r\n  const { name, img, getType } = req.body\r\n\r\n  if (!name || !getType) {\r\n    return dealRes(res, 1, '材料信息错误！')\r\n  }\r\n\r\n  let jobId\r\n  if (getType.indexOf('01') !== -1 || getType.indexOf('02') !== -1) {\r\n    jobId = 2\r\n  } else if (getType.indexOf('03') !== -1 || getType.indexOf('04') !== -1) {\r\n    jobId = 3\r\n  } else {\r\n    return dealRes(res, 1, '材料信息错误！')\r\n  }\r\n\r\n  try {\r\n    pool.getConnection((err1, connection) => {\r\n      if (err1) { throw err1 }\r\n      connection.query(materialSQL.insert, [name, img, jobId, getType], (err2, result) => {\r\n        if (err2) { throw err2 }\r\n        // 释放连接池\r\n        connection.release()\r\n        return dealRes(res, 0, '添加成功')\r\n      })\r\n    })\r\n  } catch (e) {\r\n    return dealRes(res, 1, 'internal error')\r\n  }\r\n})\r\n\r\n// 编辑材料\r\nrouter.put('/', (req, res) => {\r\n  const { id, name, img, getType } = req.body\r\n\r\n  if (id === undefined || !name || !getType) {\r\n    return dealRes(res, 1, '材料信息错误！')\r\n  }\r\n\r\n  let jobId\r\n  if (getType.indexOf('01') !== -1 || getType.indexOf('02') !== -1) {\r\n    jobId = 2\r\n  } else if (getType.indexOf('03') !== -1 || getType.indexOf('04') !== -1) {\r\n    jobId = 3\r\n  } else {\r\n    return dealRes(res, 1, '材料信息错误！')\r\n  }\r\n\r\n  try {\r\n    pool.getConnection((err1, connection) => {\r\n      if (err1) { throw err1 }\r\n      connection.query(materialSQL.update, [name, img, parseInt(jobId, 10), getType, id], (err2, result) => {\r\n        if (err2) { throw err2 }\r\n        // 释放连接池\r\n        connection.release()\r\n        return dealRes(res, 0, '修改成功')\r\n      })\r\n    })\r\n  } catch (e) {\r\n    return dealRes(res, 1, 'internal error')\r\n  }\r\n})\r\n\r\n// 删除材料\r\nrouter.delete('/', (req, res) => {\r\n  const { id } = req.body\r\n  if (!id) {\r\n    return dealRes(res, 1, '材料信息错误！')\r\n  }\r\n  try {\r\n    pool.getConnection((err1, connection) => {\r\n      if (err1) { throw err1 }\r\n      connection.query(materialSQL.delete, [id], (err2, result) => {\r\n        if (err2) { throw err2 }\r\n        // 释放连接池\r\n        connection.release()\r\n        return dealRes(res, 0, '删除成功')\r\n      })\r\n    })\r\n  } catch (e) {\r\n    return dealRes(res, 1, 'internal error')\r\n  }\r\n})\r\n\r\nexport default router\r\n\n\n\n// WEBPACK FOOTER //\n// src/routes/material.js","import express from 'express'\nimport mysql from 'mysql'\nimport dbConfig from '../db/config'\nimport notesSQL from '../db/notesSQL'\nimport dealRes from '../utils/dealRes'\n\nconst router = express.Router()\n// 使用数据库配置信息创建一个MySQL链接池\nconst pool = mysql.createPool(dbConfig.mysql)\n\nrouter.get('/product', (req, res) => {\n  const { jobId, lvStart, lvEnd } = req.query\n  console.log(jobId, lvStart, lvEnd)\n\n  if (\n    jobId === undefined\n    || parseInt(jobId, 10) != jobId\n    || lvStart === undefined\n    || lvEnd === undefined\n    || lvStart >= lvEnd\n  ) {\n    return dealRes(res, 1, '参数不合法')\n  }\n\n  try {\n    pool.getConnection((err, connection) => {\n      connection.query(notesSQL.product, [jobId, lvStart, lvEnd], (err1, result) => {\n        if (err1) { throw new Error(err1) }\n        // 释放连接池\n        connection.release()\n        return dealRes(res, 0, result)\n      })\n    })\n  } catch (e) {\n    return dealRes(res, 1, 'internal error')\n  }\n})\n\nexport default router\n\n\n\n// WEBPACK FOOTER //\n// src/routes/notes.js","import express from 'express'\nimport mysql from 'mysql'\nimport dbConfig from '../db/config'\nimport productSQL from '../db/productsql'\nimport dealRes from '../utils/dealRes'\n\nconst router = express.Router()\n// 使用数据库配置信息创建一个MySQL链接池\nconst pool = mysql.createPool(dbConfig.mysql)\n\n// 获取分页\nrouter.get('/', (req, res) => {\n  let { page, pageSize } = req.query\n  const { name, jobId } = req.body\n  page = parseInt(page, 10)\n  pageSize = parseInt(pageSize, 10)\n\n  if (!page || !pageSize) {\n    return dealRes(res, 1, '分页信息错误！')\n  }\n\n  let sName\n  if (name) {\n    sName = `%${name}%`\n  } else {\n    sName = '%'\n  }\n  let sJob\n  if (jobId) {\n    sJob = [jobId]\n  } else {\n    sJob = [4, 5, 6, 7, 8, 9, 10, 11]\n  }\n\n  try {\n    pool.getConnection((err1, connection) => {\n      if (err1) { throw new Error(err1) }\n      connection.query(productSQL.queryPage, [sName, sJob, (page - 1) * pageSize, pageSize], (err2, result) => {\n        if (err2) { throw new Error(err2) }\n        connection.query(productSQL.count, (err3, count) => {\n          if (err3) { throw new Error(err3) }\n          // 释放连接池\n          connection.release()\n          const { total } = count[0]\n          return dealRes(res, 0, {\n            list: result,\n            current: page,\n            pageSize,\n            total,\n          })\n        })\n      })\n    })\n  } catch (e) {\n    return dealRes(res, 1, 'internal error')\n  }\n})\n\n// 添加作物\nrouter.post('/', (req, res) => {\n  const { name, img, jobId, level, difficulty, stamina } = req.body\n\n  if (!name || parseInt(jobId, 10) != jobId || jobId === 0 || !level) {\n    return dealRes(res, 1, '作物信息错误！')\n  }\n\n  try {\n    pool.getConnection((err1, connection) => {\n      if (err1) { throw new Error(err1) }\n      connection.query(productSQL.insert, [name, img, jobId, level, difficulty, stamina], (err, result) => {\n        if (err) { throw err }\n        // 释放连接池\n        connection.release()\n        return dealRes(res, 0, '添加成功')\n      })\n    })\n  } catch (e) {\n    return dealRes(res, 1, 'internal error')\n  }\n})\n\n// 编辑作物\nrouter.put('/', (req, res) => {\n  const { id, name, img, jobId, level, difficulty, stamina } = req.body\n\n  if (!id || !name || parseInt(jobId, 10) != jobId || jobId == 0 || !level) {\n    return dealRes(res, 1, '作物信息错误！')\n  }\n\n  try {\n    pool.getConnection((err1, connection) => {\n      if (err1) { throw err1 }\n      connection.query(productSQL.update, [name, img, parseInt(jobId, 10), level, difficulty, stamina, id], (err2, result) => {\n        if (err2) { throw err2 }\n        // 释放连接池\n        connection.release()\n        return dealRes(res, 0, '修改成功')\n      })\n    })\n  } catch (e) {\n    return dealRes(res, 1, 'internal error')\n  }\n})\n\n// 删除作物\nrouter.delete('/', (req, res) => {\n  const { id } = req.body\n  if (!id) {\n    return dealRes(res, 1, '作物信息错误！')\n  }\n  try {\n    pool.getConnection((err1, connection) => {\n      if (err1) { throw new Error(err1) }\n      connection.query(productSQL.delete, [id], (err2, result) => {\n        if (err2) { throw new Error(err2) }\n        // 释放连接池\n        connection.release()\n        return dealRes(res, 0, '删除成功')\n      })\n    })\n  } catch (e) {\n    return dealRes(res, 1, 'internal error')\n  }\n})\n\nexport default router\n\n\n\n// WEBPACK FOOTER //\n// src/routes/product.js","import express from 'express'\nimport multer from 'multer'\nimport dealRes from '../utils/dealRes'\n\nconst router = express.Router()\n\n// 上传文件配置\nconst storage = multer.diskStorage({\n  destination: (req, file, cb) => {\n    cb(null, 'uploads/')\n  },\n  filename: (req, file, cb) => {\n    const nameNow = file.originalname.split('.')\n    cb(null, `${nameNow[0].slice(0, 5)}_${Date.now()}.${nameNow[1]}`)\n  },\n})\n\n// var upload = multer({ dest: 'uploads/' });\nconst upload = multer({ storage })\n\n// 上传图片\nrouter.post('/', upload.single('file'), (req, res, next) => {\n  const { file } = req\n  console.log(file)\n  dealRes(res, 0, file)\n})\n\nexport default router\n\n\n\n// WEBPACK FOOTER //\n// src/routes/upload.js","import express from 'express'\nimport mysql from 'mysql'\nimport dbConfig from '../db/config'\nimport userSQL from '../db/usersql'\nimport dealRes from '../utils/dealRes'\n\nconst router = express.Router()\n// 使用数据库配置信息创建一个MySQL链接池\nconst pool = mysql.createPool(dbConfig.mysql)\n\nconst rbacPrivileges = [\n  {\n    privilegeId: 1,\n    menu: '01',\n    levelId: '001',\n    path: '/setting',\n    privilegeName: '系统设置',\n    remark: 'remark',\n  },\n  {\n    privilegeId: 2,\n    menu: '01',\n    levelId: '001001',\n    path: '/setting/job',\n    privilegeName: '职业设置',\n    remark: 'remark',\n  },\n  {\n    privilegeId: 3,\n    menu: '01',\n    levelId: '001002',\n    path: '/setting/product',\n    privilegeName: '作物设置',\n    remark: 'remark',\n  },\n  {\n    privilegeId: 4,\n    menu: '01',\n    levelId: '001003',\n    path: '/setting/material',\n    privilegeName: '材料设置',\n    remark: 'remark',\n  },\n  {\n    privilegeId: 5,\n    menu: '01',\n    levelId: '001004',\n    path: '/setting/fish',\n    privilegeName: '鱼类设置',\n    remark: 'remark',\n  },\n  {\n    privilegeId: 6,\n    menu: '01',\n    levelId: '001005',\n    path: '/setting/map',\n    privilegeName: '地图设置',\n    remark: 'remark',\n  },\n  {\n    privilegeId: 7,\n    menu: '01',\n    levelId: '002',\n    path: '/notes',\n    privilegeName: '各类笔记',\n    remark: 'remark',\n  },\n  {\n    privilegeId: 8,\n    menu: '01',\n    levelId: '002001',\n    path: '/notes/product',\n    privilegeName: '制作笔记',\n    remark: 'remark',\n  },\n  {\n    privilegeId: 9,\n    menu: '01',\n    levelId: '002002',\n    path: '/notes/gather',\n    privilegeName: '采集笔记',\n    remark: 'remark',\n  },\n  {\n    privilegeId: 10,\n    menu: '01',\n    levelId: '002003',\n    path: '/notes/fish',\n    privilegeName: '钓鱼笔记',\n    remark: 'remark',\n  },\n]\n\nrouter.get('/login', (req, res) => {\n  const { uid } = req.query\n\n  try {\n    pool.getConnection((err, connection) => {\n      connection.query(userSQL.getUserById, [uid], (err1, result) => {\n        if (err1) throw new Error(err1)\n        if (result && result.length) {\n          const user = result[0]\n          delete user.pwd\n          // 释放连接池\n          connection.release()\n          return dealRes(res, 0, { user, rbacPrivileges })\n        }\n        // 释放连接池\n        connection.release()\n        return dealRes(res, 1, '用户不存在，请重新登录！')\n      })\n    })\n  } catch (e) {\n    return dealRes(res, 1, 'internal error')\n  }\n})\n\nrouter.post('/login', (req, res, next) => {\n  const { username, password } = req.body\n\n  try {\n    // 从连接池获取连接\n    pool.getConnection((err, connection) => {\n      connection.query(userSQL.userLogin, [username, password], (err1, result) => {\n        if (err1) throw new Error(err1)\n        if (result && result.length) {\n          const user = result[0]\n          delete user.pwd\n          res.cookie('uidSave', user.id, {\n            expires: new Date(Date.now() + (10 * 60000)), // 分钟\n            httpOnly: false,\n          })\n          return dealRes(res, 0, { user, rbacPrivileges })\n        }\n        // 释放连接池\n        connection.release()\n        return dealRes(res, 1, '用户不存在！')\n      })\n    })\n  } catch (e) {\n    // console.log(e)\n    return dealRes(res, 1, 'internal error')\n  }\n})\n\nexport default router\n\n\n\n// WEBPACK FOOTER //\n// src/routes/user.js","module.exports = require(\"body-parser\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"body-parser\"\n// module id = 25\n// module chunks = 0","module.exports = require(\"compression\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"compression\"\n// module id = 26\n// module chunks = 0","module.exports = require(\"consolidate\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"consolidate\"\n// module id = 27\n// module chunks = 0","module.exports = require(\"http\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"http\"\n// module id = 28\n// module chunks = 0","module.exports = require(\"lodash\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lodash\"\n// module id = 29\n// module chunks = 0","module.exports = require(\"multer\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"multer\"\n// module id = 30\n// module chunks = 0","module.exports = require(\"path\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"path\"\n// module id = 31\n// module chunks = 0"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A;;;;AChEA;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;;;;;;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AADA;;;;;;ACAA;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AC1CA;;;;;;;ACAA;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;;;;;;;ACPA;AACA;AACA;AACA;AAKA;AACA;AAKA;AACA;AAIA;AACA;AAKA;AACA;AAKA;AACA;AAhCA;AACA;AAsCA;;;;;;;ACvCA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;;;;;;;ACPA;AACA;AAGA;AAIA;AAIA;AAZA;AACA;AAcA;;;;;;;ACfA;AACA;AAGA;AACA;AACA;AAIA;AACA;AAXA;AACA;AAaA;;;;;;;ACdA;AACA;AADA;AACA;AAIA;;;;;;;ACLA;AACA;AACA;AACA;AACA;AAIA;AACA;AATA;AACA;AAWA;;;;;;;ACZA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;;;;;;;ACPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AClrKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACnCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AC1EA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACltjJA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;;;;;;A","sourceRoot":""}